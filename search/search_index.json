{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to the Git &amp; GitHub Setup Guide! This documentation is designed to help you get up and running with Git and GitHub, whether you're a beginner or looking to refine your workflow.</p>"},{"location":"#skill-level-beginner","title":"Skill Level: Beginner","text":"<ul> <li>No Prior Experience Required. We\u2019ll start Git and GitHub from scratch, explaining everything step by step.</li> </ul>"},{"location":"#what-youll-learn","title":"What You'll Learn","text":"<p>By following this guide, you will:</p> <ul> <li>Understand the basics of Git and GitHub.</li> <li>Install and configure Git on your local machine.</li> <li>Learn essential Git commands for version control.</li> <li>Sign up a GitHub account.</li> <li>Create and manage repositories on GitHub.</li> <li>Collaborate effectively using branches, pull requests, and merges.</li> </ul>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>A fundamental understanding of how to access the Command Prompt or PowerShell in Windows, and the Terminal in macOS or Linux, is essential.</li> <li>Visual Studio Code installed on your computer to utilize Git for your software development projects. (Recommended)</li> </ul>"},{"location":"#how-this-guide-is-organized","title":"How This Guide is Organized","text":"<p>This documentation is structured as follows:</p> <ol> <li>Introduction to Git \u2013 What is Git, and why should you use it?</li> <li>Installing Git \u2013 Step-by-step installation guide for Windows, macOS, and Linux.</li> <li>Basic Git Commands \u2013 Learn essential Git commands for version control.</li> <li>Introduction to GitHub \u2013 What is GitHub, and what are the benefits of using it?</li> <li>Setting Up GitHub \u2013 How to create and manage repositories on GitHub.</li> <li>Troubleshooting \u2013 Common issues and how to fix them.</li> <li>Glossary \u2013 A list of terms and definitions.</li> </ol>"},{"location":"#typographical-conventions","title":"Typographical Conventions","text":"<p>These instructions use the following typographic conventions:</p> Convention Explanation Examples Actions: Verbs in bold indicate the commands you need to follow in the instructions. Open, Type Emphasis and Product Terminology: Words in italics are used to highlight key terminology names. Git, GitHub, Install Code Blocks: Use to copy &amp; paste commands <pre><code>git --version</code></pre>"},{"location":"#admonitions","title":"Admonitions","text":"<p>This guide uses success, warning, and note messages to provide additional information for instruction steps.</p> <p>Success</p> <p>Indicates successful outcomes. Displayed in a green box with a checkmark icon and \"Success.\"</p> <p>Warning</p> <p>Alerts about potential errors. Shown in an orange box with a warning icon and \"Warning.\"</p> <p>Danger</p> <p>Warns of actions causing data loss. Appears in a red box with a lightning icon and \"Danger.\"</p> <p>Tip</p> <p>Offers helpful advice or best practices. Displayed in a light green box with a flame icon and \"Tip.\"</p> <p>Info</p> <p>Shares general information or context. Displayed in a teal box with an info icon and \"Info.\"</p> <p>Note</p> <p>Provides additional details. Displayed in a blue box with a pen icon and \"Note.\"</p> <p>Example</p> <p>Provides practical examples or use cases. Displayed in a purple box with a test tube icon and \"Example.\"</p>"},{"location":"#lets-get-started","title":"Let's Get Started!","text":"<p>Proceed to the next section to learn more about Git.</p>"},{"location":"glossary/","title":"Glossary","text":"Term Definition Git An open source, distributed version-control system. GitHub A platform for hosting and collaborating on Git repositories. Commit A Git object, a snapshot of your entire repository compressed into a SHA. Branch A separate line of development that allows working on features or fixes independently. Merge Combining changes from one branch into another. Pull Fetching changes from a remote repository and merging them into the local repository. Push Sending local commits to a remote repository. Clone Creating a copy of a repository from a remote source to a local machine. Log Refers to a chronological record of commits made to a repository, detailing the history of changes over time."},{"location":"set-1-intro-git/","title":"Introduction to Git","text":"<p>Git is a powerful tool that helps you manage changes to your projects, whether you\u2019re writing code, drafting documents, or collaborating with others. Simply put, it\u2019s a version control system (VCS) that tracks every modification, letting you save \u201csnapshots\u201d of your work over time. Imagine a safety net that catches every edit, allowing you to revisit, compare, or undo changes with ease. Developed by Linus Torvalds in 2005, Git has become the industry standard for developers and teams worldwide.</p>"},{"location":"set-1-intro-git/#why-should-you-use-git","title":"Why Should You Use Git?","text":"<ol> <li>Collaboration Made Easy: Git allows multiple people to work on the same project simultaneously without overwriting each other\u2019s work. Teams can merge their contributions seamlessly, even across continents.</li> <li>Mistake Recovery: Accidentally deleted a file or broke your code? Git lets you roll back to a previous commit, saving you from disaster.</li> <li>Experiment Fearlessly: With branches, you can try new ideas or major rewrites without risking your stable codebase. If it doesn\u2019t work out, just discard the branch.</li> <li>Track History: Git\u2019s detailed log shows who changed what and when, making it a lifesaver for debugging or understanding project decisions.</li> <li>Industry Standard: Git powers platforms like GitHub, GitLab, and Bitbucket, making it a must-know skill for developers and a gateway to open-source collaboration.</li> </ol>"},{"location":"set-1-intro-git/#why-it-matters","title":"Why It Matters","text":"<p>Imagine writing a book with no drafts or edit history and collaborating becomes a mess. Git solves this for software development, letting coders track every tweak to their work with ease.</p>"},{"location":"set-1-intro-git/#conclusion","title":"Conclusion","text":"<p>Now that you have a basic understanding of Git and its benefits, proceed to the Git Installation guide for different operating systems, or jump directly to the Installation for Windows section.</p>"},{"location":"set-2-installation/","title":"Installation","text":"<p>Welcome to the installation guide! Choose your operating systems below.</p>"},{"location":"set-2-installation/#windows-installation","title":"Windows Installation","text":"<p>Step-by-step instructions to install and set up Git on Windows, including using Command Prompt or PowerShell.</p>"},{"location":"set-2-installation/#macos-installation","title":"macOS Installation","text":"<p>A guide to installing Git on macOS using Homebrew or alternative methods, tailored for macOS users.</p>"},{"location":"set-2-installation/#linux-installation","title":"Linux Installation","text":"<p>Detailed instructions for installing Git on various Linux distributions, ensuring compatibility with your system.</p>"},{"location":"set-2a-windows/","title":"How to Install and Set Up Git on Windows","text":"<p>Step 1: Download Git for Windows</p> <ol> <li>Visit the Official Git Website.</li> <li>Click on Download for Windows. The website should detect your OS version and provide the correct installer.</li> </ol> <p>Step 2: Run the Git Installer</p> <ul> <li>Follow the on-screen instruction to begin the installation.</li> </ul> <p>Step 3: Configure Installation Options</p> <p>During the installation, you will be prompted to select various options:</p> <ul> <li>Select Components: Keep the default options selected. Ensure Git Bash, Git GUI, and Git LFS are checked.</li> <li>Choosing the Default Editor: Select your preferred text editor (e.g., Vim, Nano, Notepad++, or VS Code).</li> <li>Adjusting the PATH Environment: Choose Git from the command line and also from 3rd-party software (recommended).</li> <li>HTTPS Transport Backend: Select Use the OpenSSL library.</li> <li>Line Ending Conversions: Choose Checkout Windows-style, commit Unix-style line endings (recommended for cross-platform projects).</li> <li>Configuring the Terminal Emulator: Choose Use MinTTY (default).</li> </ul> <p>Step 4: Verify Installation</p> <ul> <li>Open Command Prompt.</li> </ul> <pre><code>git --version\n</code></pre> <p>Success!</p> <pre><code>git version 2.x.x\n</code></pre>"},{"location":"set-2a-windows/#step-2-configure-git","title":"Step 2: Configure Git","text":"<p>After installing Git, you need to configure your user details.</p> <p>1 - Set your name:</p> <pre><code>git config --global user.name \"Your Name\"\n</code></pre> <p>2 - Set your email:</p> <pre><code>git config --global user.email \"your-email@example.com\"\n</code></pre> <p>3 - Verify the configuration:</p> <pre><code>git config --list\n</code></pre> <p>Example</p> <pre><code>user.name=John Doe\nuser.email=john.doe@email.com\n</code></pre>"},{"location":"set-2b-macOS/","title":"How to Install and Set Up Git on macOS","text":""},{"location":"set-2b-macOS/#overview","title":"Overview","text":"<p>Git is a popular version control system that allows developers to track changes in their code efficiently. This guide provides step-by-step instructions on installing and configuring Git on macOS.</p> <p>Note</p> <p>In this guide, we'll use Homebrew to install Git on macOS. Alternatively, you can choose other installation methods based on your preferences (outside the scope of this guide).</p> <p>Info: What is Homebrew?</p> <p>Homebrew is a popular package manager for macOS that simplifies the installation, updating, and management of software and command-line tools. Its benefits include ease of use, a vast library of packages, and automatic handling of dependencies, making it an efficient tool for developers and users to streamline software management on macOS.</p>"},{"location":"set-2b-macOS/#step-1-install-git-on-macos","title":"Step 1: Install Git on macOS","text":"<p>1 - Open a terminal by typing Terminal in Spotlight:</p> <p>Example</p> <p></p> <p>2 - Install Homebrew:</p> <ul> <li>Copy &amp; Paste the command line below into your Terminal.</li> </ul> Bash<pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> <ul> <li>Enter your computer's login password to proceed with the installation.</li> </ul> <p>Example</p> <p></p> <ul> <li>Follow the on-screen instructions to complete the installation.</li> </ul> <p>Success!</p> <p></p> <p>3 - Install Git via Homebrew:</p> Bash<pre><code>brew install git\n</code></pre> <p>4 - Verfiy the installation:</p> Bash<pre><code>git --version\n</code></pre> <p>Success!</p> Bash<pre><code>git version 2.x.x\n</code></pre>"},{"location":"set-2b-macOS/#step-2-configure-git","title":"Step 2: Configure Git","text":"<p>After installing Git, you need to configure your user details.</p> <p>1 - Set your name:</p> Bash<pre><code>git config --global user.name \"Your Name\"\n</code></pre> <p>2 - Set your email:</p> Bash<pre><code>git config --global user.email \"your-email@example.com\"\n</code></pre> <p>3 - Verify the configuration:</p> Bash<pre><code>git config --list\n</code></pre> <p>Example</p> Bash<pre><code>user.name=John Doe\nuser.email=john.doe@email.com\n</code></pre>"},{"location":"set-2b-macOS/#conclusion","title":"Conclusion","text":"<p>Congratulations! You've successfully installed and set up Git on your macOS. You can now jump to the Introduction to GitHub or proceed to the Linux Installation section.</p>"},{"location":"set-2c-linux/","title":"How to Install and Set Up Git on Linux","text":""},{"location":"set-2c-linux/#overview","title":"Overview","text":"<p>Git is a widely used version control system that allows developers to track changes in their code efficiently. This guide provides step-by-step instructions on how to install and configure Git on Linux.</p>"},{"location":"set-2c-linux/#step-1-install-git-on-linux","title":"Step 1: Install Git on Linux","text":"<p>1 - Open a terminal using a keyboard shortcut (Ctrl + Alt + T):</p> <p>Example</p> <p></p> <p>2 - The installation process depends on your Linux distribution.</p> Ubuntu / DebianFedoraArch LinuxCentOS / RHELOpenSUSE <p>1 - Update the package list:</p> Bash<pre><code>sudo apt update\n</code></pre> <p>2 - Install Git:</p> Bash<pre><code>sudo apt install git -y\n</code></pre> <p>3 - Verify the installation:</p> Bash<pre><code>git --version\n</code></pre> <p>Success!</p> Bash<pre><code>git version 2.x.x\n</code></pre> <p>1 - Install Git using DNF:</p> Bash<pre><code>sudo dnf install git -y\n</code></pre> <p>2 - Verify the installation:</p> Bash<pre><code>git --version\n</code></pre> <p>Success!</p> Bash<pre><code>git version 2.x.x\n</code></pre> <p>1 - Install Git using pacman:</p> Bash<pre><code>sudo pacman -S git\n</code></pre> <p>2 - Verify the installation:</p> Bash<pre><code>git --version\n</code></pre> <p>Success!</p> Bash<pre><code>git version 2.x.x\n</code></pre> <p>1 - Install Git using yum:</p> Bash<pre><code>sudo yum install git -y\n</code></pre> <p>2 - Verify the installation:</p> Bash<pre><code>git --version\n</code></pre> <p>Success!</p> Bash<pre><code>git version 2.x.x\n</code></pre> <p>1 - Install Git using zypper:</p> Bash<pre><code>sudo zypper install git\n</code></pre> <p>2 - Verify the installation:</p> Bash<pre><code>git --version\n</code></pre> <p>Success!</p> Bash<pre><code>git version 2.x.x\n</code></pre>"},{"location":"set-2c-linux/#step-2-configure-git","title":"Step 2: Configure Git","text":"<p>After installing Git, set up your user information.</p> <p>1 - Set your name:</p> Bash<pre><code>git config --global user.name \"Your Name\"\n</code></pre> <p>2 - Set your email:</p> Bash<pre><code>git config --global user.email \"your-email@example.com\"\n</code></pre> <p>3 - Verify the configuration:</p> Bash<pre><code>git config --list\n</code></pre> <p>Example</p> Bash<pre><code>user.name=John Doe\nuser.email=john.doe@email.com\n</code></pre>"},{"location":"set-2c-linux/#conclusion","title":"Conclusion","text":"<p>Congratulations! You've successfully installed and set up Git on your Linux operating system. Proceed to the Basic Git Commands section.</p>"},{"location":"set-3-basic-git-commands/","title":"Basic Git Commands","text":""},{"location":"set-3-basic-git-commands/#initializing-cloning-repositories","title":"Initializing &amp; Cloning Repositories","text":"<p>These commands help you create or copy a Git repository.</p> <ul> <li>Initializes a new Git repository in the current directory</li> </ul> <pre><code>git init\n</code></pre> <ul> <li>Clones an existing repository from a remote server</li> </ul> <pre><code>git clone &lt;repository_url&gt;\n</code></pre> <p>Example: Git Clone</p> <p>git clone https://github.com/user/repo.git</p> <ul> <li>Clones a repository into a specific directory</li> </ul> <pre><code>git clone &lt;repository_url&gt; &lt;directory&gt;\n</code></pre> <p>Example: Git Clone with a specific directory</p> <p>git clone https://github.com/user/repo.git my-project-folder</p>"},{"location":"set-3-basic-git-commands/#checking-repository-status","title":"Checking Repository Status","text":"<p>These commands help you check the current state of your repository.</p> <ul> <li>Shows which files are modified, staged, or untracked</li> </ul> <pre><code>git status\n</code></pre> <ul> <li>Displays the commit history</li> </ul> <pre><code>git log\n</code></pre> <ul> <li>Shows a compact, graphical commit history</li> </ul> <pre><code>git log --oneline --graph --all\n</code></pre> <ul> <li>Displays details of a specific commit</li> </ul> <pre><code>git show &lt;commit_hash&gt;\n</code></pre> <p>Example: Git Show</p> <pre><code>git log --oneline --graph --all\n</code></pre> <p></p> <pre><code>git show b8d30fe\n</code></pre> <p></p>"},{"location":"set-3-basic-git-commands/#staging-and-committing-changes","title":"Staging and Committing Changes","text":"<p>These commands help you save and track changes.</p> <ul> <li>Adds a specific file to the staging area</li> </ul> <pre><code>git add &lt;file&gt;\n</code></pre> <ul> <li>Adds all changes in the current directory to the staging area</li> </ul> <pre><code>git add .\n</code></pre> <ul> <li>Commits the staged changes with a message</li> </ul> <pre><code>git commit -m \"commit message\"\n</code></pre> <ul> <li>Edits the last commit message</li> </ul> <pre><code>git commit --amend -m \"new message\"\n</code></pre> <p>Warning!</p> <p>The git commit --amend -m \"new message\" command only works locally by default. It modifies the most recent commit in your local repository, but it does not automatically affect the remote repository.</p>"},{"location":"set-3-basic-git-commands/#branching-and-merging","title":"Branching and Merging","text":"<p>These commands help you work with multiple versions of your project.</p> <ul> <li>Lists all branches in the local repository</li> </ul> <pre><code>git branch\n</code></pre> <ul> <li>Creates a new branch</li> </ul> <pre><code>git branch &lt;branch_name&gt;\n</code></pre> <ul> <li>Switches to an existing branch</li> </ul> <pre><code>git checkout &lt;branch_name&gt;\n</code></pre> <ul> <li>Creates and switches to a new branch</li> </ul> <pre><code>git checkout -b &lt;branch_name&gt;\n</code></pre> <ul> <li>Merges a specified branch into the current branch</li> </ul> <pre><code>git merge &lt;branch_name&gt;\n</code></pre> <ul> <li>Deletes a branch (if merged)</li> </ul> <pre><code>git branch -d &lt;branch_name&gt;\n</code></pre> <ul> <li>Force deletes a branch</li> </ul> <pre><code>git branch -D &lt;branch_name&gt;\n</code></pre> <p>Danger!</p> <p>Since -D doesn\u2019t prompt for confirmation or check merge status, you might accidentally delete a branch you didn\u2019t intend to. If you mistype the branch name or delete the wrong branch, you could lose progress.</p>"},{"location":"set-3-basic-git-commands/#working-with-remote-repositories","title":"Working with Remote Repositories","text":"<p>These commands help you interact with remote repositories.</p> <ul> <li>Lists all remote repositories</li> </ul> <pre><code>git remote -v\n</code></pre> <ul> <li>Adds a remote repository named \u201corigin\u201d</li> </ul> <pre><code>git remote add origin &lt;repository_url&gt;\n</code></pre> <ul> <li>Pushes local commits to a remote branch</li> </ul> <pre><code>git push origin &lt;branch_name&gt;\n</code></pre> <p>Tip: The .gitignore File</p> <p>When uploading local commits to a remote branch, it\u2019s wise to include a .gitignore file. This file tells Git which files and directories to exclude from version control, keeping unnecessary or sensitive items out of the repository.</p> <ul> <li>Fetches and merges changes from a remote repository</li> </ul> <pre><code>git pull origin &lt;branch_name&gt;\n</code></pre> <ul> <li>Downloads new data from the remote repository without merging</li> </ul> <pre><code>git fetch\n</code></pre>"},{"location":"set-3-basic-git-commands/#conclusion","title":"Conclusion","text":"<p>Congratulations! You've learned the basics of Git commands. Continue your journey by exploring the Introduction to GitHub section to dive deeper into collaborative development.</p>"},{"location":"set-4-intro-github/","title":"Introduction to GitHub","text":""},{"location":"set-4-intro-github/#overview","title":"Overview","text":""},{"location":"set-4-intro-github/#what-is-github","title":"What is GitHub?","text":"<p>GitHub is a web-based platform that makes it easier to manage and share coding projects. It builds on Git, a tool that helps track changes to files, by providing a place where projects can be stored and worked on from anywhere. Imagine it as an online workspace where multiple people can collaborate on the same project without losing track of who made what changes.</p> <p>Note</p> <p>A common misunderstanding that Git and GitHub are closely related because their names sound similar, but they are actually completely different tools.</p>"},{"location":"set-4-intro-github/#learning-outcomes-beginners","title":"Learning Outcomes (Beginners)","text":"<p>By end of this guide, you will be able to:</p> <ul> <li>Create GitHub account \u2013 A platform to store, share, and track changes in your coding projects.</li> <li>Create and manage repositories \u2013 Set up and organize your projects on GitHub.</li> <li>Clone repositories \u2013 Copy a project from GitHub to your computer to work on it.</li> <li>Commit changes \u2013 Save your work and note the changes you\u2019ve made.</li> <li>Push and pull changes \u2013 Upload your changes to GitHub or get updates from others.</li> <li>Work with branches \u2013 Create separate versions of your project to make changes without affecting the main one.</li> <li>Merge changes \u2013 Combine your branch changes with the main project when you're done.</li> </ul> <p>It may seem overwhelming at first, but don\u2019t worry - step-by-step guides are available to help you through each part!</p>"},{"location":"set-4-intro-github/#register-an-account","title":"Register an Account","text":"<p>Before you begin, you must register an account to use GitHub. There are multiple ways to sign-up for GitHub, but for this specific example, we will guide you how to register with an email.</p> <ol> <li> <p>Open GitHub's homepage, and type in your email provided in the box on the center of the page.          This will take you to the page with the registration form.</p> </li> <li> <p>Your email will be pre-filled from the previous step, so you will only need to add your password and username.     </p> <p>Tip</p> <p>It's a good idea to choose a professional username, as you may use this account to link to your resume or professional profiles in the future.</p> </li> <li> <p>Lastly, you will need to verify your email by entering the 6-digit code sent to your inbox.     </p> </li> </ol> <p>Success</p> <p>You've successfully created a GitHub account!</p>"},{"location":"set-4-intro-github/#website-overview","title":"Website Overview","text":"<p>Here are key parts of the site that you'll interact with as a beginner, each serving a unique purpose\u2014 from navigating your profile and repositories to managing notifications and accessing tools</p>"},{"location":"set-4-intro-github/#navigation","title":"Navigation","text":"<p>The GitHub navigation bar gives you quick access to key areas like your profile, repositories, and notifications. You can also search for projects, create new repositories, and access pull requests and issues. </p>"},{"location":"set-4-intro-github/#exploration","title":"Exploration","text":"<p>The right sidebar on the homepage displays various public repositories created by other users, allowing you to explore projects from the community. It also highlights the latest updates and changes on GitHub, including new features and improvements. </p>"},{"location":"set-4-intro-github/#personal-repositories","title":"Personal repositories","text":"<p>The left sidebar is the user profile and repository pages shows a list of repositories a user created or contributed to. The naming convention typically follows the format of \"owner/repository-name\" (where \"owner\" is the user or organization that created the repository, and \"repository-name\" is the project name). </p>"},{"location":"set-4-intro-github/#conclusion","title":"Conclusion","text":"<p>You're all set to start using GitHub! With the knowledge of how to navigate the platform, you'll be able to explore GitHub and make the most of it on your coding journey. Proceed to the GitHub Setup section to get started.</p>"},{"location":"set-5-basic-github/","title":"Setting up the first Github Repository","text":"<p>Creating a GitHub repository is the first step to hosting your project's code, or other files on GitHub. Follow the steps below to create your own GitHub repository.</p>"},{"location":"set-5-basic-github/#creating-a-repository","title":"Creating a Repository","text":"<ol> <li> <p>If you don't already have a GitHub account, you can sign up at Github. You can refer back to the Introduction to GitHub for signup assistance. Once you have an account, sign in.</p> </li> <li> <p>You should already be in the homepage once logged in. In the top right corner, click the \"+\" sign, then select New repository.</p> <p></p> <p>Tip</p> <p>Alternatively, you can directly access the New Repository page by typing github.com/new in your browser's address bar. This will redirect you to the exact same page as clicking the New repository button.</p> </li> <li> <p>On the \"Create a New Repository\" page, you must fill in the Repository name field and choose whether to make it Public or Private. Descriptions are optional and can be modified down the road.</p> <p></p> </li> <li> <p>Once everything is filled, you can go ahead and press Create Repository to create your very first personal repository!</p> <p>Success</p> <p>You've successfully created a github repository account!</p> </li> </ol> <p>Info</p> <p>A Git repository on its own has limitations. To get the most out of it, you\u2019ll want to integrate your coding project with the repository, allowing you to track changes, collaborate, and manage your work more effectively.</p>"},{"location":"set-5-basic-github/#conclusion","title":"Conclusion","text":"<p>Congrats! You\u2019ve just created your first GitHub repository. Now you're ready to start uploading and managing your project files. The next step will guide you on how to use Git with GitHub to track changes, collaborate with others, and make the most out of your repository.</p>"},{"location":"troubleshooting/","title":"Troubleshooting Git and GitHub","text":"<p>Below is a table of common issues and their solutions for Git and GitHub.</p> Issue Description Solution Merge Conflicts Git reports a merge conflict when pulling or merging branches. Resolve conflicts manually by editing the conflicting files, then run <code>git add &lt;file&gt;</code> and <code>git commit</code> to complete the merge. Detached HEAD State Git shows a \"detached HEAD\" state after checking out a commit. Switch back to a branch using <code>git checkout &lt;branch-name&gt;</code> or create a new branch with <code>git checkout -b &lt;new-branch-name&gt;</code>. Push Rejected Git rejects a push with the error \"non-fast-forward updates were rejected.\" Pull the latest changes with <code>git pull origin &lt;branch&gt;</code>, resolve any conflicts, and try pushing again. GitHub Repository Not Found Git cannot find the remote repository on GitHub. Verify the remote URL with <code>git remote -v</code> and update it if necessary using <code>git remote set-url origin &lt;new-url&gt;</code>. Branch Not Found Git cannot find a branch locally or remotely. Fetch all branches with <code>git fetch --all</code>, then check out the branch with <code>git checkout &lt;branch-name&gt;</code>. Accidental Commit on Main Changes were committed to the <code>main</code> branch instead of a feature branch. Create a new branch from the commit with <code>git branch &lt;new-branch&gt;</code>, reset <code>main</code> to the previous commit with <code>git reset --hard HEAD~1</code>, and switch to the new branch."}]}